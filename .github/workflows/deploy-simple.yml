name: Deploy Bot (Simple)

# Simplified deployment workflow for easier debugging
# This workflow runs the bot directly without systemd

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  test-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction --only main
        
    - name: Verify installation
      run: |
        echo "=== Poetry Environment Info ==="
        poetry env info
        
        echo ""
        echo "=== Installed Packages ==="
        poetry show
        
        echo ""
        echo "=== Televoica Command ==="
        poetry run televoica --help

    - name: Test bot configuration
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        STT_TELEGRAM_BOT: true
        STT_PROVIDER: whisper
        STT_WHISPER_MODEL: base
        STT_WHISPER_DEVICE: cpu
      run: |
        echo "=== Testing Bot Configuration ==="
        poetry run python -c "
        import os
        from televoica.config.settings import load_config, Settings, STTConfig, TelegramConfig
        from televoica.core.engine import SpeechToTextEngine
        from televoica.core.providers import WhisperProvider
        from televoica.bot.telegram_bot import TelegramSTTBot

        print('✅ Imports successful')

        print('Loading settings...')
        settings = load_config()
        print(f'✅ Bot token configured: {bool(settings.telegram.bot_token)}')
        print(f'✅ Provider: {settings.stt.provider}')
        print(f'✅ Model: {settings.stt.whisper_model}')

        print('Initializing STT engine...')
        provider = WhisperProvider({
            'model': settings.stt.whisper_model,
            'device': settings.stt.whisper_device,
        })
        engine = SpeechToTextEngine(provider=provider)
        print('✅ STT engine initialized')

        print('Creating bot instance...')
        bot = TelegramSTTBot(settings=settings, engine=engine)
        print('✅ Bot instance created')

        print('')
        print('=== Configuration Test Passed ===')
        "

    - name: Run health check
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      run: |
        echo "=== Running Health Check ==="
        poetry run python scripts/health_check.py

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If this test passed, you can deploy using:" >> $GITHUB_STEP_SUMMARY
        echo "- Docker deployment (recommended)" >> $GITHUB_STEP_SUMMARY
        echo "- Systemd service on a self-hosted runner" >> $GITHUB_STEP_SUMMARY
        echo "- Manual deployment on your server" >> $GITHUB_STEP_SUMMARY

